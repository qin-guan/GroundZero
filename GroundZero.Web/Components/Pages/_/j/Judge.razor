@page "/_/j/{secret:guid}/judge"
@using GroundZero.Gavel
@using GroundZero.Web.Client.Layout
@using GroundZero.Web.Entities
@using MoreLinq
@using SqlSugar

@layout LandingLayout
@rendermode InteractiveServer

@inject ISqlSugarClient Db
@inject NavigationManager Navigation

@if (IsPending)
{
    <HxSpinner/>
}
else if (Hackathon is null)
{
    <h1>Hackathon not found :(</h1>
    <a href="/home/organizer/hackathons/new">Create your own</a>
    <span>hackathon instead?</span>
}
else if (JudgeJudge.NextTeamId is null)
{
    <p>No team to judge yet! Hang around for a while?</p>
}
else
{
    <div class="vstack">
        <HxCard>
            <BodyTemplate>
                @JudgeJudge.NextTeam!.Name
                <br/>
                @JudgeJudge.NextTeam!.Description

                @if (JudgeJudge.PreviousTeamId is null)
                {
                    <HxButton @onclick="BeginContinue" Text="Continue"></HxButton>
                }
                else
                {
                    <HxButton @onclick="() => Vote(false)" Text="Current better!"></HxButton>
                }
            </BodyTemplate>
        </HxCard>

        <HxCard>
            <BodyTemplate>
                <HxButton @onclick="() => JudgeJudge.PreviousTeamId is null ? BeginSkip() : VoteSkip()"
                          Text="Skip"></HxButton>
            </BodyTemplate>
        </HxCard>

        @if (JudgeJudge.PreviousTeamId is not null)
        {
            <HxCard>
                <BodyTemplate>
                    @JudgeJudge.PreviousTeam!.Name
                    <br/>
                    @JudgeJudge.PreviousTeam!.Description
                    <HxButton @onclick="() => Vote(true)" Text="Previous better!"></HxButton>
                </BodyTemplate>
            </HxCard>
        }
    </div>
}

@code {

    [Parameter]
    public Guid? Secret { get; set; }

    private bool IsPending { get; set; } = true;

    private Entities.Judge JudgeJudge { get; set; } = null!;

    private Hackathon? Hackathon { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
        await MaybeInitAnnotator();
        IsPending = false;
    }

    private async Task FetchData()
    {
        var entity = await Db.Queryable<Entities.Judge>()
            .Includes(j => j.NextTeam!, t => t.JudgesViewed)
            .Includes(j => j.PreviousTeam)
            .Includes(j => j.IgnoredTeams)
            .Includes(j => j.ViewedTeams)
            .LeftJoin<Hackathon>((j, h) => j.HackathonId == h.Id)
            .Where((j) => j.Secret == Secret)
            .Select((j, h) => new { Judge = j, Hackathon = h, j.NextTeam, j.PreviousTeam, j.IgnoredTeams, j.ViewedTeams })
            .SingleAsync();

        JudgeJudge = entity.Judge;
        JudgeJudge.NextTeam = entity.NextTeam;
        JudgeJudge.PreviousTeam = entity.PreviousTeam;
        JudgeJudge.IgnoredTeams = entity.IgnoredTeams;
        JudgeJudge.ViewedTeams = entity.ViewedTeams;
        Hackathon = entity.Hackathon;
    }

    private async Task MaybeInitAnnotator()
    {
        if (JudgeJudge.NextTeamId is not null)
        {
            return;
        }

        var next = await ChooseNext();
        if (next is not null)
        {
            JudgeJudge.NextTeamId = next.Id;
            JudgeJudge.NextTeam = next;
            await Db.Updateable(JudgeJudge).ExecuteCommandAsync();
        }
    }

    private async Task<List<Team>> GetAvailableTeams()
    {
        var ignoredTeamIds = JudgeJudge.IgnoredTeams.Select(t => t.Id).ToList();
       
        var query = Db.Queryable<Team>()
            .Includes(t => t.JudgesViewed)
            .Where(t => t.Active && t.HackathonId == JudgeJudge.HackathonId);

        if (ignoredTeamIds.Count > 0)
        {
            query = query.Where(t => !ignoredTeamIds.Contains(t.Id));
        }

        return await query.ToListAsync();
    }

    private async Task<List<Team>> PreferredItems()
    {
        var availableItems = await GetAvailableTeams();

        // First filter for prioritized teams if available
        var prioritizedTeams = availableItems.Where(t => t.Prioritized).ToList();
        var teams = prioritizedTeams.Count > 0 ? prioritizedTeams : availableItems;

        // Filter out busy teams (those being viewed by other judges recently)
        var busyTeamIds = await Db.Queryable<Entities.Judge>()
            .Where(j => j.HackathonId == JudgeJudge.HackathonId &&
                        j.Active &&
                        j.NextTeamId != null &&
                        j.UpdatedAt != null &&
                        (DateTimeOffset.Now - j.UpdatedAt) <= TimeSpan.FromMinutes(1))
            .Select(j => j.NextTeamId)
            .ToListAsync();

        var nonBusyTeams = teams.Where(t => !busyTeamIds.Contains(t.Id)).ToList();
        var preferred = nonBusyTeams.Count > 0 ? nonBusyTeams : teams;

        // Prefer teams seen by fewer judges
        var lessSeenTeams = preferred.Where(t => t.JudgesViewed.Count < 3).ToList();
        return lessSeenTeams.Count > 0 ? lessSeenTeams : preferred;
    }

    private async Task<Team?> ChooseNext()
    {
        var teams = (await PreferredItems()).Shuffle().ToList();
        if (teams.Count == 0) return null;

        if (JudgeJudge.PreviousTeamId is null)
        {
            return teams.First();
        }

        if (Random.Shared.NextDouble() < CrowdBt.Epsilon)
        {
            return teams.First();
        }

        return CrowdBt.Argmax(
            i => CrowdBt.ExpectedInformationGain(
                JudgeJudge.Alpha,
                JudgeJudge.Beta,
                JudgeJudge.PreviousTeam!.Mu,
                JudgeJudge.PreviousTeam!.SigmaSq,
                i.Mu,
                i.SigmaSq
            ),
            teams
        );
    }

    private async Task BeginContinue()
    {
        if (JudgeJudge.NextTeamId == null) throw new ArgumentNullException(nameof(JudgeJudge.NextTeamId));

        // Record that this team was viewed and ignored
        await Db.Insertable(new TeamJudgeIgnored
        {
            TeamId = JudgeJudge.NextTeamId.Value,
            JudgeId = JudgeJudge.Id
        }).ExecuteCommandAsync();

        await Db.Insertable(new TeamJudgeViewed
        {
            TeamId = JudgeJudge.NextTeamId.Value,
            JudgeId = JudgeJudge.Id
        }).ExecuteCommandAsync();

        // Set previous team to current team
        JudgeJudge.PreviousTeamId = JudgeJudge.NextTeamId;
        await Db.Updateable(JudgeJudge).ExecuteCommandAsync();

        await UpdateNext();
    }

    private async Task BeginSkip()
    {
        if (JudgeJudge.NextTeamId == null) throw new ArgumentNullException(nameof(JudgeJudge.NextTeamId));

        await Db.Insertable(new TeamJudgeIgnored
        {
            TeamId = JudgeJudge.NextTeamId.Value,
            JudgeId = JudgeJudge.Id
        }).ExecuteCommandAsync();

        JudgeJudge.NextTeamId = null;
        await Db.Updateable(JudgeJudge).ExecuteCommandAsync();

        Navigation.NavigateTo($"/_/j/{Secret}/judge", true);
    }

    private async Task VoteSkip()
    {
        if (JudgeJudge.NextTeamId == null) throw new ArgumentNullException(nameof(JudgeJudge.NextTeamId));

        await Db.Insertable(new TeamJudgeIgnored
        {
            TeamId = JudgeJudge.NextTeamId.Value,
            JudgeId = JudgeJudge.Id
        }).ExecuteCommandAsync();

        await UpdateNext();
    }

    private async Task Vote(bool previousWon)
    {
        if (JudgeJudge.PreviousTeam?.Active == true && JudgeJudge.NextTeam?.Active == true)
        {
            var winner = previousWon ? JudgeJudge.PreviousTeam! : JudgeJudge.NextTeam!;
            var loser = previousWon ? JudgeJudge.NextTeam! : JudgeJudge.PreviousTeam!;

            var (newAlpha, newBeta, winnerMu, winnerSigmaSq, loserMu, loserSigmaSq) =
                CrowdBt.Update(JudgeJudge.Alpha, JudgeJudge.Beta, winner.Mu, winner.SigmaSq, loser.Mu, loser.SigmaSq);

            JudgeJudge.Alpha = newAlpha;
            JudgeJudge.Beta = newBeta;
            winner.Mu = winnerMu;
            winner.SigmaSq = winnerSigmaSq;
            loser.Mu = loserMu;
            loser.SigmaSq = loserSigmaSq;

            await Db.Updateable(winner).ExecuteCommandAsync();
            await Db.Updateable(loser).ExecuteCommandAsync();
            await Db.Insertable(new Decision
            {
                JudgeId = JudgeJudge.Id,
                WinnerId = winner.Id,
                LoserId = loser.Id
            }).ExecuteCommandAsync();
        }

        if (JudgeJudge.NextTeamId == null) throw new ArgumentNullException(nameof(JudgeJudge.NextTeamId));

        // Record that this team was viewed
        await Db.Insertable(new TeamJudgeViewed
        {
            TeamId = JudgeJudge.NextTeamId.Value,
            JudgeId = JudgeJudge.Id
        }).ExecuteCommandAsync();

        // Set previous team to current team and mark it as ignored
        JudgeJudge.PreviousTeamId = JudgeJudge.NextTeamId;
        await Db.Updateable(JudgeJudge).ExecuteCommandAsync();

        await Db.Insertable(new TeamJudgeIgnored
        {
            TeamId = JudgeJudge.PreviousTeamId.Value,
            JudgeId = JudgeJudge.Id
        }).ExecuteCommandAsync();

        await UpdateNext();
    }

    private async Task UpdateNext()
    {
        await FetchData();

        var next = await ChooseNext();
        JudgeJudge.NextTeamId = next?.Id;
        JudgeJudge.UpdatedAt = DateTimeOffset.Now;

        if (next is not null)
        {
            JudgeJudge.NextTeam = next;
        }

        await Db.Updateable(JudgeJudge).ExecuteCommandAsync();
    }

}