@page "/App/Hackathons/New"
@using GroundZero.Web.Authentication
@using GroundZero.Web.Entities
@using Microsoft.AspNetCore.Authorization
@using SqlSugar

@attribute [Authorize]

@implements IDisposable

@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation
@inject ISqlSugarClient Db

<h3>New Hackathon</h3>

<EditForm EditContext="_editContext" OnValidSubmit="Submit" FormName="NewHackathon">
    <HxInputText Label="Name" Placeholder="Enter hackathon's name" @bind-Value="Model!.Name"/>
    <HxInputText Label="Short code" Placeholder="abcdef" Hint="Participants will use this short code to join your hackathon"
                 @bind-Value="Model!.ShortCode"/>
    <HxInputTextArea Label="Description" Placeholder="Something exciting here..." @bind-Value="Model!.Description"/>

    <div class="hx-form-group position-relative">
        <label class="form-label" for="startDate">
            Start date
        </label>
        <InputDate id="startDate"
                   aria-describedby="startDateFeedback"
                   class=@(EventStartDateIsInvalid ? "form-control is-invalid" : "form-control")
                   @bind-Value="Model!.EventStartDate"
        />
        <ValidationMessage id="startDateFeedback" class="invalid-feedback"
                           For="() => Model!.EventStartDate"></ValidationMessage>
    </div>

    <div class="hx-form-group position-relative">
        <label class="form-label" for="endDate">
            End date
        </label>
        <InputDate id="endDate"
                   aria-describedby="endDateFeedback"
                   class=@(EventEndDateIsInvalid ? "form-control is-invalid" : "form-control")
                   @bind-Value="Model!.EventEndDate"
        />
        <ValidationMessage id="endDateFeedback" class="invalid-feedback"
                           For="() => Model!.EventEndDate"></ValidationMessage>
    </div>

    <HxInputText Label="Venue" Placeholder="Where is your event?" @bind-Value="Model!.Venue"/>
    <HxInputText Label="Website" Placeholder="Your event website" @bind-Value="Model!.HomepageUri"/>

    <div>
        <HxSubmit Color="ThemeColor.Primary">Create</HxSubmit>
    </div>
</EditForm>

@code {

    private EditContext? _editContext;
    private ValidationMessageStore? _messageStore;

    private bool EventStartDateIsInvalid => _editContext!.GetValidationMessages(() => Model!.EventStartDate).Any();

    private bool EventEndDateIsInvalid => _editContext!.GetValidationMessages(() => Model!.EventEndDate).Any();

    [SupplyParameterFromForm]
    private Hackathon? Model { get; set; }

    protected override void OnInitialized()
    {
        Model ??= new Hackathon();
        _editContext ??= new EditContext(Model);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private void HandleValidationRequested(
        object? sender,
        ValidationRequestedEventArgs args
    )
    {
        _messageStore?.Clear();

        if (string.IsNullOrWhiteSpace(Model!.Name))
        {
            _messageStore?.Add(() => Model!.Name, "Name must not be empty hahahaha");
        }

        if (Model!.EventStartDate < DateTimeOffset.Now)
        {
            _messageStore?.Add(() => Model.EventStartDate, "Event should start in the future");
        }

        if (Model!.EventStartDate > Model!.EventEndDate)
        {
            _messageStore?.Add(() => Model.EventEndDate, "Event should end after it starts");
        }
    }

    private async Task Submit()
    {
        var shortCodeTaken = await Db.Queryable<Entities.Hackathon>()
            .AnyAsync(h => h.ShortCode == Model!.ShortCode);
        
        if (shortCodeTaken)
        {
            _messageStore?.Add(() => Model.ShortCode, "This short code is not available anymore!");
            return;
        }
        
        var hackathon = new Entities.Hackathon
        {
            Name = Model!.Name ?? throw new Exception(),
            Description = Model!.Description ?? throw new Exception(),
            EventStartDate = Model.EventStartDate ?? DateTimeOffset.Now,
            EventEndDate = Model.EventEndDate ?? DateTimeOffset.Now,
            ShortCode = Model.ShortCode ?? throw new Exception(),
            Venue = Model!.Venue ?? throw new Exception(),
            HomepageUri = Model!.HomepageUri ?? throw new Exception(),
            Organizers =
            [
                new Organizer
                {
                    UserId = HttpContextAccessor.HttpContext!.User.GetUserId()
                }
            ]
        };
        
        Console.WriteLine(HttpContextAccessor.HttpContext!.User.GetUserId());

        var entity = await Db.InsertNav(hackathon)
            .Include(h => h.Organizers)
            .ExecuteReturnEntityAsync();

        Navigation.NavigateTo($"App/Hackathons/{entity.Id}");
    }

    public class Hackathon
    {
        public string? Name { get; set; }

        public string? Description { get; set; }

        public string? Venue { get; set; }

        public string? HomepageUri { get; set; }

        public string? ShortCode { get; set; }

        public DateTimeOffset? EventStartDate { get; set; }

        public DateTimeOffset? EventEndDate { get; set; }
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }

}
